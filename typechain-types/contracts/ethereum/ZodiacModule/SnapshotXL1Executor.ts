/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface SnapshotXL1ExecutorInterface extends utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR_TYPEHASH()": FunctionFragment;
    "TRANSACTION_TYPEHASH()": FunctionFragment;
    "avatar()": FunctionFragment;
    "cancelProposals(uint256[])": FunctionFragment;
    "changeL2ExecutionRelayer(uint256)": FunctionFragment;
    "editWhitelist(uint256[],uint256[])": FunctionFragment;
    "executeProposalTx(uint256,address,uint256,bytes,uint8)": FunctionFragment;
    "executeProposalTxBatch(uint256,address[],uint256[],bytes[],uint8[])": FunctionFragment;
    "generateTransactionHashData(address,uint256,bytes,uint8,uint256)": FunctionFragment;
    "getGuard()": FunctionFragment;
    "getNumOfTxInProposal(uint256)": FunctionFragment;
    "getProposalState(uint256)": FunctionFragment;
    "getTransactionHash(address,uint256,bytes,uint8)": FunctionFragment;
    "getTxHash(uint256,uint256)": FunctionFragment;
    "guard()": FunctionFragment;
    "isTxExecuted(uint256,uint256)": FunctionFragment;
    "l2ExecutionRelayer()": FunctionFragment;
    "owner()": FunctionFragment;
    "proposalIndex()": FunctionFragment;
    "proposalIndexToProposalExecution(uint256)": FunctionFragment;
    "receiveProposal(uint256,uint256,uint256,uint256,bytes32[])": FunctionFragment;
    "receiveProposalTest(uint256,uint256,uint256,bytes32[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAvatar(address)": FunctionFragment;
    "setGuard(address)": FunctionFragment;
    "setTarget(address)": FunctionFragment;
    "setUp(bytes)": FunctionFragment;
    "starknetCore()": FunctionFragment;
    "target()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "whitelistedSpaces(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DOMAIN_SEPARATOR_TYPEHASH"
      | "TRANSACTION_TYPEHASH"
      | "avatar"
      | "cancelProposals"
      | "changeL2ExecutionRelayer"
      | "editWhitelist"
      | "executeProposalTx"
      | "executeProposalTxBatch"
      | "generateTransactionHashData"
      | "getGuard"
      | "getNumOfTxInProposal"
      | "getProposalState"
      | "getTransactionHash"
      | "getTxHash"
      | "guard"
      | "isTxExecuted"
      | "l2ExecutionRelayer"
      | "owner"
      | "proposalIndex"
      | "proposalIndexToProposalExecution"
      | "receiveProposal"
      | "receiveProposalTest"
      | "renounceOwnership"
      | "setAvatar"
      | "setGuard"
      | "setTarget"
      | "setUp"
      | "starknetCore"
      | "target"
      | "transferOwnership"
      | "whitelistedSpaces"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRANSACTION_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "avatar", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cancelProposals",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "changeL2ExecutionRelayer",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "editWhitelist",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "executeProposalTx",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeProposalTxBatch",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "generateTransactionHashData",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "getGuard", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getNumOfTxInProposal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalState",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransactionHash",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTxHash",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "guard", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isTxExecuted",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "l2ExecutionRelayer",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposalIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalIndexToProposalExecution",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveProposal",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveProposalTest",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAvatar",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGuard",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTarget",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUp",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "starknetCore",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "target", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistedSpaces",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRANSACTION_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "avatar", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeL2ExecutionRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeProposalTx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeProposalTxBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateTransactionHashData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getGuard", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNumOfTxInProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTxHash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "guard", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTxExecuted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l2ExecutionRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalIndexToProposalExecution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveProposalTest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAvatar", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setGuard", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setTarget", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "starknetCore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "target", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedSpaces",
    data: BytesLike
  ): Result;

  events: {
    "AvatarSet(address,address)": EventFragment;
    "ChangedGuard(address)": EventFragment;
    "ChangedL2ExecutionRelayer(uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ProposalCancelled(uint256)": EventFragment;
    "ProposalExecuted(uint256)": EventFragment;
    "ProposalReceived(uint256)": EventFragment;
    "SnapshotXL1ExecutorSetUpComplete(address,address,address,address,uint256,address)": EventFragment;
    "TargetSet(address,address)": EventFragment;
    "TransactionExecuted(uint256,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AvatarSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangedGuard"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangedL2ExecutionRelayer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalReceived"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SnapshotXL1ExecutorSetUpComplete"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TargetSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransactionExecuted"): EventFragment;
}

export interface AvatarSetEventObject {
  previousAvatar: string;
  newAvatar: string;
}
export type AvatarSetEvent = TypedEvent<[string, string], AvatarSetEventObject>;

export type AvatarSetEventFilter = TypedEventFilter<AvatarSetEvent>;

export interface ChangedGuardEventObject {
  guard: string;
}
export type ChangedGuardEvent = TypedEvent<[string], ChangedGuardEventObject>;

export type ChangedGuardEventFilter = TypedEventFilter<ChangedGuardEvent>;

export interface ChangedL2ExecutionRelayerEventObject {
  _l2ExecutionRelayer: BigNumber;
}
export type ChangedL2ExecutionRelayerEvent = TypedEvent<
  [BigNumber],
  ChangedL2ExecutionRelayerEventObject
>;

export type ChangedL2ExecutionRelayerEventFilter =
  TypedEventFilter<ChangedL2ExecutionRelayerEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ProposalCancelledEventObject {
  proposalIndex: BigNumber;
}
export type ProposalCancelledEvent = TypedEvent<
  [BigNumber],
  ProposalCancelledEventObject
>;

export type ProposalCancelledEventFilter =
  TypedEventFilter<ProposalCancelledEvent>;

export interface ProposalExecutedEventObject {
  proposalIndex: BigNumber;
}
export type ProposalExecutedEvent = TypedEvent<
  [BigNumber],
  ProposalExecutedEventObject
>;

export type ProposalExecutedEventFilter =
  TypedEventFilter<ProposalExecutedEvent>;

export interface ProposalReceivedEventObject {
  proposalIndex: BigNumber;
}
export type ProposalReceivedEvent = TypedEvent<
  [BigNumber],
  ProposalReceivedEventObject
>;

export type ProposalReceivedEventFilter =
  TypedEventFilter<ProposalReceivedEvent>;

export interface SnapshotXL1ExecutorSetUpCompleteEventObject {
  initiator: string;
  _owner: string;
  _avatar: string;
  _target: string;
  _l2ExecutionRelayer: BigNumber;
  _starknetCore: string;
}
export type SnapshotXL1ExecutorSetUpCompleteEvent = TypedEvent<
  [string, string, string, string, BigNumber, string],
  SnapshotXL1ExecutorSetUpCompleteEventObject
>;

export type SnapshotXL1ExecutorSetUpCompleteEventFilter =
  TypedEventFilter<SnapshotXL1ExecutorSetUpCompleteEvent>;

export interface TargetSetEventObject {
  previousTarget: string;
  newTarget: string;
}
export type TargetSetEvent = TypedEvent<[string, string], TargetSetEventObject>;

export type TargetSetEventFilter = TypedEventFilter<TargetSetEvent>;

export interface TransactionExecutedEventObject {
  proposalIndex: BigNumber;
  txHash: string;
}
export type TransactionExecutedEvent = TypedEvent<
  [BigNumber, string],
  TransactionExecutedEventObject
>;

export type TransactionExecutedEventFilter =
  TypedEventFilter<TransactionExecutedEvent>;

export interface SnapshotXL1Executor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SnapshotXL1ExecutorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_SEPARATOR_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    TRANSACTION_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    avatar(overrides?: CallOverrides): Promise<[string]>;

    cancelProposals(
      _proposalIndexes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeL2ExecutionRelayer(
      _l2ExecutionRelayer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    editWhitelist(
      toAdd: PromiseOrValue<BigNumberish>[],
      toRemove: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeProposalTx(
      _proposalIndex: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeProposalTxBatch(
      _proposalIndex: PromiseOrValue<BigNumberish>,
      tos: PromiseOrValue<string>[],
      values: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>[],
      operations: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    generateTransactionHashData(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operation: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { txHashData: string }>;

    getGuard(overrides?: CallOverrides): Promise<[string] & { _guard: string }>;

    getNumOfTxInProposal(
      _proposalIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { numTx: BigNumber }>;

    getProposalState(
      _proposalIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getTransactionHash(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operation: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { txHash: string }>;

    getTxHash(
      _proposalIndex: PromiseOrValue<BigNumberish>,
      txIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { txHash: string }>;

    guard(overrides?: CallOverrides): Promise<[string]>;

    isTxExecuted(
      _proposalIndex: PromiseOrValue<BigNumberish>,
      txIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isExecuted: boolean }>;

    l2ExecutionRelayer(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proposalIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    proposalIndexToProposalExecution(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { executionCounter: BigNumber; cancelled: boolean }
    >;

    receiveProposal(
      callerAddress: PromiseOrValue<BigNumberish>,
      proposalOutcome: PromiseOrValue<BigNumberish>,
      executionHashLow: PromiseOrValue<BigNumberish>,
      executionHashHigh: PromiseOrValue<BigNumberish>,
      _txHashes: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    receiveProposalTest(
      callerAddress: PromiseOrValue<BigNumberish>,
      executionHash: PromiseOrValue<BigNumberish>,
      proposalOutcome: PromiseOrValue<BigNumberish>,
      _txHashes: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAvatar(
      _avatar: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGuard(
      _guard: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTarget(
      _target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUp(
      initParams: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    starknetCore(overrides?: CallOverrides): Promise<[string]>;

    target(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    whitelistedSpaces(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  DOMAIN_SEPARATOR_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  TRANSACTION_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  avatar(overrides?: CallOverrides): Promise<string>;

  cancelProposals(
    _proposalIndexes: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeL2ExecutionRelayer(
    _l2ExecutionRelayer: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  editWhitelist(
    toAdd: PromiseOrValue<BigNumberish>[],
    toRemove: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeProposalTx(
    _proposalIndex: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    operation: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeProposalTxBatch(
    _proposalIndex: PromiseOrValue<BigNumberish>,
    tos: PromiseOrValue<string>[],
    values: PromiseOrValue<BigNumberish>[],
    data: PromiseOrValue<BytesLike>[],
    operations: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  generateTransactionHashData(
    to: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    operation: PromiseOrValue<BigNumberish>,
    nonce: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getGuard(overrides?: CallOverrides): Promise<string>;

  getNumOfTxInProposal(
    _proposalIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getProposalState(
    _proposalIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  getTransactionHash(
    to: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    operation: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getTxHash(
    _proposalIndex: PromiseOrValue<BigNumberish>,
    txIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  guard(overrides?: CallOverrides): Promise<string>;

  isTxExecuted(
    _proposalIndex: PromiseOrValue<BigNumberish>,
    txIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  l2ExecutionRelayer(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  proposalIndex(overrides?: CallOverrides): Promise<BigNumber>;

  proposalIndexToProposalExecution(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean] & { executionCounter: BigNumber; cancelled: boolean }
  >;

  receiveProposal(
    callerAddress: PromiseOrValue<BigNumberish>,
    proposalOutcome: PromiseOrValue<BigNumberish>,
    executionHashLow: PromiseOrValue<BigNumberish>,
    executionHashHigh: PromiseOrValue<BigNumberish>,
    _txHashes: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  receiveProposalTest(
    callerAddress: PromiseOrValue<BigNumberish>,
    executionHash: PromiseOrValue<BigNumberish>,
    proposalOutcome: PromiseOrValue<BigNumberish>,
    _txHashes: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAvatar(
    _avatar: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGuard(
    _guard: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTarget(
    _target: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUp(
    initParams: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  starknetCore(overrides?: CallOverrides): Promise<string>;

  target(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  whitelistedSpaces(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    DOMAIN_SEPARATOR_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    TRANSACTION_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    avatar(overrides?: CallOverrides): Promise<string>;

    cancelProposals(
      _proposalIndexes: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    changeL2ExecutionRelayer(
      _l2ExecutionRelayer: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    editWhitelist(
      toAdd: PromiseOrValue<BigNumberish>[],
      toRemove: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    executeProposalTx(
      _proposalIndex: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operation: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeProposalTxBatch(
      _proposalIndex: PromiseOrValue<BigNumberish>,
      tos: PromiseOrValue<string>[],
      values: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>[],
      operations: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    generateTransactionHashData(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operation: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getGuard(overrides?: CallOverrides): Promise<string>;

    getNumOfTxInProposal(
      _proposalIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposalState(
      _proposalIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    getTransactionHash(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operation: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getTxHash(
      _proposalIndex: PromiseOrValue<BigNumberish>,
      txIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    guard(overrides?: CallOverrides): Promise<string>;

    isTxExecuted(
      _proposalIndex: PromiseOrValue<BigNumberish>,
      txIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    l2ExecutionRelayer(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    proposalIndex(overrides?: CallOverrides): Promise<BigNumber>;

    proposalIndexToProposalExecution(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { executionCounter: BigNumber; cancelled: boolean }
    >;

    receiveProposal(
      callerAddress: PromiseOrValue<BigNumberish>,
      proposalOutcome: PromiseOrValue<BigNumberish>,
      executionHashLow: PromiseOrValue<BigNumberish>,
      executionHashHigh: PromiseOrValue<BigNumberish>,
      _txHashes: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    receiveProposalTest(
      callerAddress: PromiseOrValue<BigNumberish>,
      executionHash: PromiseOrValue<BigNumberish>,
      proposalOutcome: PromiseOrValue<BigNumberish>,
      _txHashes: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAvatar(
      _avatar: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGuard(
      _guard: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTarget(
      _target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUp(
      initParams: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    starknetCore(overrides?: CallOverrides): Promise<string>;

    target(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistedSpaces(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "AvatarSet(address,address)"(
      previousAvatar?: PromiseOrValue<string> | null,
      newAvatar?: PromiseOrValue<string> | null
    ): AvatarSetEventFilter;
    AvatarSet(
      previousAvatar?: PromiseOrValue<string> | null,
      newAvatar?: PromiseOrValue<string> | null
    ): AvatarSetEventFilter;

    "ChangedGuard(address)"(guard?: null): ChangedGuardEventFilter;
    ChangedGuard(guard?: null): ChangedGuardEventFilter;

    "ChangedL2ExecutionRelayer(uint256)"(
      _l2ExecutionRelayer?: null
    ): ChangedL2ExecutionRelayerEventFilter;
    ChangedL2ExecutionRelayer(
      _l2ExecutionRelayer?: null
    ): ChangedL2ExecutionRelayerEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "ProposalCancelled(uint256)"(
      proposalIndex?: null
    ): ProposalCancelledEventFilter;
    ProposalCancelled(proposalIndex?: null): ProposalCancelledEventFilter;

    "ProposalExecuted(uint256)"(
      proposalIndex?: null
    ): ProposalExecutedEventFilter;
    ProposalExecuted(proposalIndex?: null): ProposalExecutedEventFilter;

    "ProposalReceived(uint256)"(
      proposalIndex?: null
    ): ProposalReceivedEventFilter;
    ProposalReceived(proposalIndex?: null): ProposalReceivedEventFilter;

    "SnapshotXL1ExecutorSetUpComplete(address,address,address,address,uint256,address)"(
      initiator?: PromiseOrValue<string> | null,
      _owner?: PromiseOrValue<string> | null,
      _avatar?: PromiseOrValue<string> | null,
      _target?: null,
      _l2ExecutionRelayer?: null,
      _starknetCore?: null
    ): SnapshotXL1ExecutorSetUpCompleteEventFilter;
    SnapshotXL1ExecutorSetUpComplete(
      initiator?: PromiseOrValue<string> | null,
      _owner?: PromiseOrValue<string> | null,
      _avatar?: PromiseOrValue<string> | null,
      _target?: null,
      _l2ExecutionRelayer?: null,
      _starknetCore?: null
    ): SnapshotXL1ExecutorSetUpCompleteEventFilter;

    "TargetSet(address,address)"(
      previousTarget?: PromiseOrValue<string> | null,
      newTarget?: PromiseOrValue<string> | null
    ): TargetSetEventFilter;
    TargetSet(
      previousTarget?: PromiseOrValue<string> | null,
      newTarget?: PromiseOrValue<string> | null
    ): TargetSetEventFilter;

    "TransactionExecuted(uint256,bytes32)"(
      proposalIndex?: null,
      txHash?: null
    ): TransactionExecutedEventFilter;
    TransactionExecuted(
      proposalIndex?: null,
      txHash?: null
    ): TransactionExecutedEventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    TRANSACTION_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    avatar(overrides?: CallOverrides): Promise<BigNumber>;

    cancelProposals(
      _proposalIndexes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeL2ExecutionRelayer(
      _l2ExecutionRelayer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    editWhitelist(
      toAdd: PromiseOrValue<BigNumberish>[],
      toRemove: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeProposalTx(
      _proposalIndex: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeProposalTxBatch(
      _proposalIndex: PromiseOrValue<BigNumberish>,
      tos: PromiseOrValue<string>[],
      values: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>[],
      operations: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    generateTransactionHashData(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operation: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGuard(overrides?: CallOverrides): Promise<BigNumber>;

    getNumOfTxInProposal(
      _proposalIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposalState(
      _proposalIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTransactionHash(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operation: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTxHash(
      _proposalIndex: PromiseOrValue<BigNumberish>,
      txIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    guard(overrides?: CallOverrides): Promise<BigNumber>;

    isTxExecuted(
      _proposalIndex: PromiseOrValue<BigNumberish>,
      txIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    l2ExecutionRelayer(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proposalIndex(overrides?: CallOverrides): Promise<BigNumber>;

    proposalIndexToProposalExecution(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    receiveProposal(
      callerAddress: PromiseOrValue<BigNumberish>,
      proposalOutcome: PromiseOrValue<BigNumberish>,
      executionHashLow: PromiseOrValue<BigNumberish>,
      executionHashHigh: PromiseOrValue<BigNumberish>,
      _txHashes: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    receiveProposalTest(
      callerAddress: PromiseOrValue<BigNumberish>,
      executionHash: PromiseOrValue<BigNumberish>,
      proposalOutcome: PromiseOrValue<BigNumberish>,
      _txHashes: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAvatar(
      _avatar: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGuard(
      _guard: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTarget(
      _target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUp(
      initParams: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    starknetCore(overrides?: CallOverrides): Promise<BigNumber>;

    target(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    whitelistedSpaces(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TRANSACTION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    avatar(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelProposals(
      _proposalIndexes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeL2ExecutionRelayer(
      _l2ExecutionRelayer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    editWhitelist(
      toAdd: PromiseOrValue<BigNumberish>[],
      toRemove: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeProposalTx(
      _proposalIndex: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeProposalTxBatch(
      _proposalIndex: PromiseOrValue<BigNumberish>,
      tos: PromiseOrValue<string>[],
      values: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>[],
      operations: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    generateTransactionHashData(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operation: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGuard(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNumOfTxInProposal(
      _proposalIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposalState(
      _proposalIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTransactionHash(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operation: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTxHash(
      _proposalIndex: PromiseOrValue<BigNumberish>,
      txIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    guard(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isTxExecuted(
      _proposalIndex: PromiseOrValue<BigNumberish>,
      txIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l2ExecutionRelayer(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposalIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposalIndexToProposalExecution(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    receiveProposal(
      callerAddress: PromiseOrValue<BigNumberish>,
      proposalOutcome: PromiseOrValue<BigNumberish>,
      executionHashLow: PromiseOrValue<BigNumberish>,
      executionHashHigh: PromiseOrValue<BigNumberish>,
      _txHashes: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    receiveProposalTest(
      callerAddress: PromiseOrValue<BigNumberish>,
      executionHash: PromiseOrValue<BigNumberish>,
      proposalOutcome: PromiseOrValue<BigNumberish>,
      _txHashes: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAvatar(
      _avatar: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGuard(
      _guard: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTarget(
      _target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUp(
      initParams: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    starknetCore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    target(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    whitelistedSpaces(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
