/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface L1ExecutorInterface extends utils.Interface {
  functions: {
    "disableSpace(uint256)": FunctionFragment;
    "enableSpace(uint256)": FunctionFragment;
    "execute(uint256,uint256,uint256,uint256,bytes)": FunctionFragment;
    "executionRelayer()": FunctionFragment;
    "isSpaceEnabled(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setExecutionRelayer(uint256)": FunctionFragment;
    "setTarget(address)": FunctionFragment;
    "setUp(bytes)": FunctionFragment;
    "starknetCore()": FunctionFragment;
    "target()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "disableSpace"
      | "enableSpace"
      | "execute"
      | "executionRelayer"
      | "isSpaceEnabled"
      | "owner"
      | "renounceOwnership"
      | "setExecutionRelayer"
      | "setTarget"
      | "setUp"
      | "starknetCore"
      | "target"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "disableSpace",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "enableSpace",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executionRelayer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isSpaceEnabled",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setExecutionRelayer",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTarget",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUp",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "starknetCore",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "target", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "disableSpace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableSpace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executionRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSpaceEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExecutionRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTarget", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "starknetCore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "target", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "ExecutionRelayerSet(uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ProposalCancelled(uint256)": EventFragment;
    "ProposalExecuted(uint256)": EventFragment;
    "ProposalReceived(uint256)": EventFragment;
    "SnapshotXL1ExecutorSetUpComplete(address,address,uint256,address)": EventFragment;
    "SpaceDisabled(uint256)": EventFragment;
    "SpaceEnabled(uint256)": EventFragment;
    "TargetSet(address)": EventFragment;
    "TransactionExecuted(uint256,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ExecutionRelayerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalReceived"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SnapshotXL1ExecutorSetUpComplete"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SpaceDisabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SpaceEnabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TargetSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransactionExecuted"): EventFragment;
}

export interface ExecutionRelayerSetEventObject {
  newExecutionRelayer: BigNumber;
}
export type ExecutionRelayerSetEvent = TypedEvent<
  [BigNumber],
  ExecutionRelayerSetEventObject
>;

export type ExecutionRelayerSetEventFilter =
  TypedEventFilter<ExecutionRelayerSetEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ProposalCancelledEventObject {
  proposalIndex: BigNumber;
}
export type ProposalCancelledEvent = TypedEvent<
  [BigNumber],
  ProposalCancelledEventObject
>;

export type ProposalCancelledEventFilter =
  TypedEventFilter<ProposalCancelledEvent>;

export interface ProposalExecutedEventObject {
  proposalIndex: BigNumber;
}
export type ProposalExecutedEvent = TypedEvent<
  [BigNumber],
  ProposalExecutedEventObject
>;

export type ProposalExecutedEventFilter =
  TypedEventFilter<ProposalExecutedEvent>;

export interface ProposalReceivedEventObject {
  proposalIndex: BigNumber;
}
export type ProposalReceivedEvent = TypedEvent<
  [BigNumber],
  ProposalReceivedEventObject
>;

export type ProposalReceivedEventFilter =
  TypedEventFilter<ProposalReceivedEvent>;

export interface SnapshotXL1ExecutorSetUpCompleteEventObject {
  _owner: string;
  _target: string;
  _l2ExecutionRelayer: BigNumber;
  _starknetCore: string;
}
export type SnapshotXL1ExecutorSetUpCompleteEvent = TypedEvent<
  [string, string, BigNumber, string],
  SnapshotXL1ExecutorSetUpCompleteEventObject
>;

export type SnapshotXL1ExecutorSetUpCompleteEventFilter =
  TypedEventFilter<SnapshotXL1ExecutorSetUpCompleteEvent>;

export interface SpaceDisabledEventObject {
  space: BigNumber;
}
export type SpaceDisabledEvent = TypedEvent<
  [BigNumber],
  SpaceDisabledEventObject
>;

export type SpaceDisabledEventFilter = TypedEventFilter<SpaceDisabledEvent>;

export interface SpaceEnabledEventObject {
  space: BigNumber;
}
export type SpaceEnabledEvent = TypedEvent<
  [BigNumber],
  SpaceEnabledEventObject
>;

export type SpaceEnabledEventFilter = TypedEventFilter<SpaceEnabledEvent>;

export interface TargetSetEventObject {
  newTarget: string;
}
export type TargetSetEvent = TypedEvent<[string], TargetSetEventObject>;

export type TargetSetEventFilter = TypedEventFilter<TargetSetEvent>;

export interface TransactionExecutedEventObject {
  proposalIndex: BigNumber;
  txHash: string;
}
export type TransactionExecutedEvent = TypedEvent<
  [BigNumber, string],
  TransactionExecutedEventObject
>;

export type TransactionExecutedEventFilter =
  TypedEventFilter<TransactionExecutedEvent>;

export interface L1Executor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: L1ExecutorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    disableSpace(
      space: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    enableSpace(
      space: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    execute(
      callerAddress: PromiseOrValue<BigNumberish>,
      proposalOutcome: PromiseOrValue<BigNumberish>,
      executionHashLow: PromiseOrValue<BigNumberish>,
      executionHashHigh: PromiseOrValue<BigNumberish>,
      executionParams: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executionRelayer(overrides?: CallOverrides): Promise<[BigNumber]>;

    isSpaceEnabled(
      space: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setExecutionRelayer(
      _executionRelayer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTarget(
      _target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUp(
      initParams: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    starknetCore(overrides?: CallOverrides): Promise<[string]>;

    target(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  disableSpace(
    space: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  enableSpace(
    space: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  execute(
    callerAddress: PromiseOrValue<BigNumberish>,
    proposalOutcome: PromiseOrValue<BigNumberish>,
    executionHashLow: PromiseOrValue<BigNumberish>,
    executionHashHigh: PromiseOrValue<BigNumberish>,
    executionParams: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executionRelayer(overrides?: CallOverrides): Promise<BigNumber>;

  isSpaceEnabled(
    space: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setExecutionRelayer(
    _executionRelayer: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTarget(
    _target: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUp(
    initParams: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  starknetCore(overrides?: CallOverrides): Promise<string>;

  target(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    disableSpace(
      space: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    enableSpace(
      space: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    execute(
      callerAddress: PromiseOrValue<BigNumberish>,
      proposalOutcome: PromiseOrValue<BigNumberish>,
      executionHashLow: PromiseOrValue<BigNumberish>,
      executionHashHigh: PromiseOrValue<BigNumberish>,
      executionParams: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    executionRelayer(overrides?: CallOverrides): Promise<BigNumber>;

    isSpaceEnabled(
      space: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setExecutionRelayer(
      _executionRelayer: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTarget(
      _target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUp(
      initParams: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    starknetCore(overrides?: CallOverrides): Promise<string>;

    target(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ExecutionRelayerSet(uint256)"(
      newExecutionRelayer?: PromiseOrValue<BigNumberish> | null
    ): ExecutionRelayerSetEventFilter;
    ExecutionRelayerSet(
      newExecutionRelayer?: PromiseOrValue<BigNumberish> | null
    ): ExecutionRelayerSetEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "ProposalCancelled(uint256)"(
      proposalIndex?: null
    ): ProposalCancelledEventFilter;
    ProposalCancelled(proposalIndex?: null): ProposalCancelledEventFilter;

    "ProposalExecuted(uint256)"(
      proposalIndex?: null
    ): ProposalExecutedEventFilter;
    ProposalExecuted(proposalIndex?: null): ProposalExecutedEventFilter;

    "ProposalReceived(uint256)"(
      proposalIndex?: null
    ): ProposalReceivedEventFilter;
    ProposalReceived(proposalIndex?: null): ProposalReceivedEventFilter;

    "SnapshotXL1ExecutorSetUpComplete(address,address,uint256,address)"(
      _owner?: PromiseOrValue<string> | null,
      _target?: null,
      _l2ExecutionRelayer?: null,
      _starknetCore?: null
    ): SnapshotXL1ExecutorSetUpCompleteEventFilter;
    SnapshotXL1ExecutorSetUpComplete(
      _owner?: PromiseOrValue<string> | null,
      _target?: null,
      _l2ExecutionRelayer?: null,
      _starknetCore?: null
    ): SnapshotXL1ExecutorSetUpCompleteEventFilter;

    "SpaceDisabled(uint256)"(space?: null): SpaceDisabledEventFilter;
    SpaceDisabled(space?: null): SpaceDisabledEventFilter;

    "SpaceEnabled(uint256)"(space?: null): SpaceEnabledEventFilter;
    SpaceEnabled(space?: null): SpaceEnabledEventFilter;

    "TargetSet(address)"(
      newTarget?: PromiseOrValue<string> | null
    ): TargetSetEventFilter;
    TargetSet(newTarget?: PromiseOrValue<string> | null): TargetSetEventFilter;

    "TransactionExecuted(uint256,bytes32)"(
      proposalIndex?: null,
      txHash?: null
    ): TransactionExecutedEventFilter;
    TransactionExecuted(
      proposalIndex?: null,
      txHash?: null
    ): TransactionExecutedEventFilter;
  };

  estimateGas: {
    disableSpace(
      space: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    enableSpace(
      space: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    execute(
      callerAddress: PromiseOrValue<BigNumberish>,
      proposalOutcome: PromiseOrValue<BigNumberish>,
      executionHashLow: PromiseOrValue<BigNumberish>,
      executionHashHigh: PromiseOrValue<BigNumberish>,
      executionParams: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executionRelayer(overrides?: CallOverrides): Promise<BigNumber>;

    isSpaceEnabled(
      space: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setExecutionRelayer(
      _executionRelayer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTarget(
      _target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUp(
      initParams: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    starknetCore(overrides?: CallOverrides): Promise<BigNumber>;

    target(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    disableSpace(
      space: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    enableSpace(
      space: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    execute(
      callerAddress: PromiseOrValue<BigNumberish>,
      proposalOutcome: PromiseOrValue<BigNumberish>,
      executionHashLow: PromiseOrValue<BigNumberish>,
      executionHashHigh: PromiseOrValue<BigNumberish>,
      executionParams: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executionRelayer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isSpaceEnabled(
      space: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setExecutionRelayer(
      _executionRelayer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTarget(
      _target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUp(
      initParams: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    starknetCore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    target(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
